{
 hello (println "Hello World!")

 hello2 #$ ["echo" "Hello" "World!"]

 target-dir {target "target"
             novelty (not (mach.core/file-exists? target))
             update! #$ ["mkdir" target]
             clean!  (when (mach.core/file-exists? target)
                       #$ ["rmdir" target])}

 classes-dir {target "target/classes"
              depends [target-dir]
              update! #$ ["mkdir" target]
              clean! (when (mach.core/file-exists? target)
                       #$ ["rmdir" target])}

 classes {depends [classes-dir]
          novelty (mach.core/modified-since #ref [classes-dir target] "src")
          update! #$$ ["javac" "-d" #ref [classes-dir target] novelty]
          clean! (when (mach.core/file-exists? #ref [classes-dir target])
                   #$ ["rm" "-rf" (str #ref [classes-dir target] "/*")])}

 sass {dir "sass"}

 css {target "target/app.css"
      depends [target-dir]
      novelty (mach.core/modified-since target #ref [sass dir])
      update! (apply mach.core/sh (concat ["sassc"] novelty [">" target]))}

 jar {target "target/foo.jar"
      depends [target-dir classes css]
      novelty (concat
               (filter
                (partial mach.core/modified-since? (mach.core/last-modified target))
                #ref [classes target])
               (filter
                (partial mach.core/modified-since? (mach.core/last-modified target))
                #ref [css target]))
      update! (if (mach.core/file-exists? target)
                #$$ ["jar uf" target novelty]
                #$ ["jar cf" target #ref [classes-dir target]])}

 clean {depends [jar:clean]}
 }
